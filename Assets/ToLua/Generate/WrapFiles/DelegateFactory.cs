//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Collections.Generic;
using LuaInterface;

public class DelegateFactory
{
	public delegate Delegate DelegateCreate(LuaFunction func, LuaTable self, bool flag);
	public static Dictionary<Type, DelegateCreate> dict = new Dictionary<Type, DelegateCreate>();
	static DelegateFactory factory = new DelegateFactory();

	public static void Init()
	{
		Register();
	}

	public static void Register()
	{
		dict.Clear();
		dict.Add(typeof(System.Action), factory.System_Action);
		dict.Add(typeof(UnityEngine.Events.UnityAction), factory.UnityEngine_Events_UnityAction);
		dict.Add(typeof(System.Predicate<int>), factory.System_Predicate_int);
		dict.Add(typeof(System.Action<int>), factory.System_Action_int);
		dict.Add(typeof(System.Comparison<int>), factory.System_Comparison_int);
		dict.Add(typeof(System.Func<int,int>), factory.System_Func_int_int);
		dict.Add(typeof(DG.Tweening.TweenAnimCallBack), factory.DG_Tweening_TweenAnimCallBack);
		dict.Add(typeof(UnityEngine.RectTransform.ReapplyDrivenProperties), factory.UnityEngine_RectTransform_ReapplyDrivenProperties);
		dict.Add(typeof(UnityEngine.Camera.CameraCallback), factory.UnityEngine_Camera_CameraCallback);
		dict.Add(typeof(UnityEngine.Application.LowMemoryCallback), factory.UnityEngine_Application_LowMemoryCallback);
		dict.Add(typeof(UnityEngine.Application.AdvertisingIdentifierCallback), factory.UnityEngine_Application_AdvertisingIdentifierCallback);
		dict.Add(typeof(UnityEngine.Application.LogCallback), factory.UnityEngine_Application_LogCallback);
		dict.Add(typeof(UnityEngine.AudioClip.PCMReaderCallback), factory.UnityEngine_AudioClip_PCMReaderCallback);
		dict.Add(typeof(UnityEngine.AudioClip.PCMSetPositionCallback), factory.UnityEngine_AudioClip_PCMSetPositionCallback);
		dict.Add(typeof(System.Action<UnityEngine.AsyncOperation>), factory.System_Action_UnityEngine_AsyncOperation);
		dict.Add(typeof(System.Action<string,UnityEngine.Sprite>), factory.System_Action_string_UnityEngine_Sprite);
		dict.Add(typeof(System.Action<string,UnityEngine.GameObject>), factory.System_Action_string_UnityEngine_GameObject);
		dict.Add(typeof(System.Action<string,UnityEngine.Object>), factory.System_Action_string_UnityEngine_Object);
		dict.Add(typeof(System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>>), factory.System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject);
		dict.Add(typeof(AlignToFinish), factory.AlignToFinish);
		dict.Add(typeof(UnityEngine.UI.InputField.OnValidateInput), factory.UnityEngine_UI_InputField_OnValidateInput);
		dict.Add(typeof(UpdateItemDelegate), factory.UpdateItemDelegate);
		dict.Add(typeof(Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate), factory.Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate);
		dict.Add(typeof(Spine.Unity.MeshGeneratorDelegate), factory.Spine_Unity_MeshGeneratorDelegate);
		dict.Add(typeof(Spine.Unity.SkeletonRenderer.InstructionDelegate), factory.Spine_Unity_SkeletonRenderer_InstructionDelegate);
		dict.Add(typeof(Spine.Unity.UpdateBonesDelegate), factory.Spine_Unity_UpdateBonesDelegate);
		dict.Add(typeof(System.Predicate<Spine.Animation>), factory.System_Predicate_Spine_Animation);
		dict.Add(typeof(System.Action<Spine.Animation>), factory.System_Action_Spine_Animation);
		dict.Add(typeof(System.Comparison<Spine.Animation>), factory.System_Comparison_Spine_Animation);
		dict.Add(typeof(System.Predicate<Spine.Skin>), factory.System_Predicate_Spine_Skin);
		dict.Add(typeof(System.Action<Spine.Skin>), factory.System_Action_Spine_Skin);
		dict.Add(typeof(System.Comparison<Spine.Skin>), factory.System_Comparison_Spine_Skin);

		DelegateTraits<System.Action>.Init(factory.System_Action);
		DelegateTraits<UnityEngine.Events.UnityAction>.Init(factory.UnityEngine_Events_UnityAction);
		DelegateTraits<System.Predicate<int>>.Init(factory.System_Predicate_int);
		DelegateTraits<System.Action<int>>.Init(factory.System_Action_int);
		DelegateTraits<System.Comparison<int>>.Init(factory.System_Comparison_int);
		DelegateTraits<System.Func<int,int>>.Init(factory.System_Func_int_int);
		DelegateTraits<DG.Tweening.TweenAnimCallBack>.Init(factory.DG_Tweening_TweenAnimCallBack);
		DelegateTraits<UnityEngine.RectTransform.ReapplyDrivenProperties>.Init(factory.UnityEngine_RectTransform_ReapplyDrivenProperties);
		DelegateTraits<UnityEngine.Camera.CameraCallback>.Init(factory.UnityEngine_Camera_CameraCallback);
		DelegateTraits<UnityEngine.Application.LowMemoryCallback>.Init(factory.UnityEngine_Application_LowMemoryCallback);
		DelegateTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Init(factory.UnityEngine_Application_AdvertisingIdentifierCallback);
		DelegateTraits<UnityEngine.Application.LogCallback>.Init(factory.UnityEngine_Application_LogCallback);
		DelegateTraits<UnityEngine.AudioClip.PCMReaderCallback>.Init(factory.UnityEngine_AudioClip_PCMReaderCallback);
		DelegateTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Init(factory.UnityEngine_AudioClip_PCMSetPositionCallback);
		DelegateTraits<System.Action<UnityEngine.AsyncOperation>>.Init(factory.System_Action_UnityEngine_AsyncOperation);
		DelegateTraits<System.Action<string,UnityEngine.Sprite>>.Init(factory.System_Action_string_UnityEngine_Sprite);
		DelegateTraits<System.Action<string,UnityEngine.GameObject>>.Init(factory.System_Action_string_UnityEngine_GameObject);
		DelegateTraits<System.Action<string,UnityEngine.Object>>.Init(factory.System_Action_string_UnityEngine_Object);
		DelegateTraits<System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>>>.Init(factory.System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject);
		DelegateTraits<AlignToFinish>.Init(factory.AlignToFinish);
		DelegateTraits<UnityEngine.UI.InputField.OnValidateInput>.Init(factory.UnityEngine_UI_InputField_OnValidateInput);
		DelegateTraits<UpdateItemDelegate>.Init(factory.UpdateItemDelegate);
		DelegateTraits<Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate>.Init(factory.Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate);
		DelegateTraits<Spine.Unity.MeshGeneratorDelegate>.Init(factory.Spine_Unity_MeshGeneratorDelegate);
		DelegateTraits<Spine.Unity.SkeletonRenderer.InstructionDelegate>.Init(factory.Spine_Unity_SkeletonRenderer_InstructionDelegate);
		DelegateTraits<Spine.Unity.UpdateBonesDelegate>.Init(factory.Spine_Unity_UpdateBonesDelegate);
		DelegateTraits<System.Predicate<Spine.Animation>>.Init(factory.System_Predicate_Spine_Animation);
		DelegateTraits<System.Action<Spine.Animation>>.Init(factory.System_Action_Spine_Animation);
		DelegateTraits<System.Comparison<Spine.Animation>>.Init(factory.System_Comparison_Spine_Animation);
		DelegateTraits<System.Predicate<Spine.Skin>>.Init(factory.System_Predicate_Spine_Skin);
		DelegateTraits<System.Action<Spine.Skin>>.Init(factory.System_Action_Spine_Skin);
		DelegateTraits<System.Comparison<Spine.Skin>>.Init(factory.System_Comparison_Spine_Skin);

		TypeTraits<System.Action>.Init(factory.Check_System_Action);
		TypeTraits<UnityEngine.Events.UnityAction>.Init(factory.Check_UnityEngine_Events_UnityAction);
		TypeTraits<System.Predicate<int>>.Init(factory.Check_System_Predicate_int);
		TypeTraits<System.Action<int>>.Init(factory.Check_System_Action_int);
		TypeTraits<System.Comparison<int>>.Init(factory.Check_System_Comparison_int);
		TypeTraits<System.Func<int,int>>.Init(factory.Check_System_Func_int_int);
		TypeTraits<DG.Tweening.TweenAnimCallBack>.Init(factory.Check_DG_Tweening_TweenAnimCallBack);
		TypeTraits<UnityEngine.RectTransform.ReapplyDrivenProperties>.Init(factory.Check_UnityEngine_RectTransform_ReapplyDrivenProperties);
		TypeTraits<UnityEngine.Camera.CameraCallback>.Init(factory.Check_UnityEngine_Camera_CameraCallback);
		TypeTraits<UnityEngine.Application.LowMemoryCallback>.Init(factory.Check_UnityEngine_Application_LowMemoryCallback);
		TypeTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Init(factory.Check_UnityEngine_Application_AdvertisingIdentifierCallback);
		TypeTraits<UnityEngine.Application.LogCallback>.Init(factory.Check_UnityEngine_Application_LogCallback);
		TypeTraits<UnityEngine.AudioClip.PCMReaderCallback>.Init(factory.Check_UnityEngine_AudioClip_PCMReaderCallback);
		TypeTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Init(factory.Check_UnityEngine_AudioClip_PCMSetPositionCallback);
		TypeTraits<System.Action<UnityEngine.AsyncOperation>>.Init(factory.Check_System_Action_UnityEngine_AsyncOperation);
		TypeTraits<System.Action<string,UnityEngine.Sprite>>.Init(factory.Check_System_Action_string_UnityEngine_Sprite);
		TypeTraits<System.Action<string,UnityEngine.GameObject>>.Init(factory.Check_System_Action_string_UnityEngine_GameObject);
		TypeTraits<System.Action<string,UnityEngine.Object>>.Init(factory.Check_System_Action_string_UnityEngine_Object);
		TypeTraits<System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>>>.Init(factory.Check_System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject);
		TypeTraits<AlignToFinish>.Init(factory.Check_AlignToFinish);
		TypeTraits<UnityEngine.UI.InputField.OnValidateInput>.Init(factory.Check_UnityEngine_UI_InputField_OnValidateInput);
		TypeTraits<UpdateItemDelegate>.Init(factory.Check_UpdateItemDelegate);
		TypeTraits<Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate>.Init(factory.Check_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate);
		TypeTraits<Spine.Unity.MeshGeneratorDelegate>.Init(factory.Check_Spine_Unity_MeshGeneratorDelegate);
		TypeTraits<Spine.Unity.SkeletonRenderer.InstructionDelegate>.Init(factory.Check_Spine_Unity_SkeletonRenderer_InstructionDelegate);
		TypeTraits<Spine.Unity.UpdateBonesDelegate>.Init(factory.Check_Spine_Unity_UpdateBonesDelegate);
		TypeTraits<System.Predicate<Spine.Animation>>.Init(factory.Check_System_Predicate_Spine_Animation);
		TypeTraits<System.Action<Spine.Animation>>.Init(factory.Check_System_Action_Spine_Animation);
		TypeTraits<System.Comparison<Spine.Animation>>.Init(factory.Check_System_Comparison_Spine_Animation);
		TypeTraits<System.Predicate<Spine.Skin>>.Init(factory.Check_System_Predicate_Spine_Skin);
		TypeTraits<System.Action<Spine.Skin>>.Init(factory.Check_System_Action_Spine_Skin);
		TypeTraits<System.Comparison<Spine.Skin>>.Init(factory.Check_System_Comparison_Spine_Skin);

		StackTraits<System.Action>.Push = factory.Push_System_Action;
		StackTraits<UnityEngine.Events.UnityAction>.Push = factory.Push_UnityEngine_Events_UnityAction;
		StackTraits<System.Predicate<int>>.Push = factory.Push_System_Predicate_int;
		StackTraits<System.Action<int>>.Push = factory.Push_System_Action_int;
		StackTraits<System.Comparison<int>>.Push = factory.Push_System_Comparison_int;
		StackTraits<System.Func<int,int>>.Push = factory.Push_System_Func_int_int;
		StackTraits<DG.Tweening.TweenAnimCallBack>.Push = factory.Push_DG_Tweening_TweenAnimCallBack;
		StackTraits<UnityEngine.RectTransform.ReapplyDrivenProperties>.Push = factory.Push_UnityEngine_RectTransform_ReapplyDrivenProperties;
		StackTraits<UnityEngine.Camera.CameraCallback>.Push = factory.Push_UnityEngine_Camera_CameraCallback;
		StackTraits<UnityEngine.Application.LowMemoryCallback>.Push = factory.Push_UnityEngine_Application_LowMemoryCallback;
		StackTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Push = factory.Push_UnityEngine_Application_AdvertisingIdentifierCallback;
		StackTraits<UnityEngine.Application.LogCallback>.Push = factory.Push_UnityEngine_Application_LogCallback;
		StackTraits<UnityEngine.AudioClip.PCMReaderCallback>.Push = factory.Push_UnityEngine_AudioClip_PCMReaderCallback;
		StackTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Push = factory.Push_UnityEngine_AudioClip_PCMSetPositionCallback;
		StackTraits<System.Action<UnityEngine.AsyncOperation>>.Push = factory.Push_System_Action_UnityEngine_AsyncOperation;
		StackTraits<System.Action<string,UnityEngine.Sprite>>.Push = factory.Push_System_Action_string_UnityEngine_Sprite;
		StackTraits<System.Action<string,UnityEngine.GameObject>>.Push = factory.Push_System_Action_string_UnityEngine_GameObject;
		StackTraits<System.Action<string,UnityEngine.Object>>.Push = factory.Push_System_Action_string_UnityEngine_Object;
		StackTraits<System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>>>.Push = factory.Push_System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject;
		StackTraits<AlignToFinish>.Push = factory.Push_AlignToFinish;
		StackTraits<UnityEngine.UI.InputField.OnValidateInput>.Push = factory.Push_UnityEngine_UI_InputField_OnValidateInput;
		StackTraits<UpdateItemDelegate>.Push = factory.Push_UpdateItemDelegate;
		StackTraits<Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate>.Push = factory.Push_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate;
		StackTraits<Spine.Unity.MeshGeneratorDelegate>.Push = factory.Push_Spine_Unity_MeshGeneratorDelegate;
		StackTraits<Spine.Unity.SkeletonRenderer.InstructionDelegate>.Push = factory.Push_Spine_Unity_SkeletonRenderer_InstructionDelegate;
		StackTraits<Spine.Unity.UpdateBonesDelegate>.Push = factory.Push_Spine_Unity_UpdateBonesDelegate;
		StackTraits<System.Predicate<Spine.Animation>>.Push = factory.Push_System_Predicate_Spine_Animation;
		StackTraits<System.Action<Spine.Animation>>.Push = factory.Push_System_Action_Spine_Animation;
		StackTraits<System.Comparison<Spine.Animation>>.Push = factory.Push_System_Comparison_Spine_Animation;
		StackTraits<System.Predicate<Spine.Skin>>.Push = factory.Push_System_Predicate_Spine_Skin;
		StackTraits<System.Action<Spine.Skin>>.Push = factory.Push_System_Action_Spine_Skin;
		StackTraits<System.Comparison<Spine.Skin>>.Push = factory.Push_System_Comparison_Spine_Skin;
	}
    
    public static Delegate CreateDelegate(Type t, LuaFunction func = null)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));            
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func);
            
            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }  
            else
            {
                Delegate d = Create(func, null, false);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func);
                return d;
            }       
        }

        return Create(null, null, false);        
    }
    
    public static Delegate CreateDelegate(Type t, LuaFunction func, LuaTable self)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func, self);

            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }
            else
            {
                Delegate d = Create(func, self, true);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func, self);
                return d;
            }
        }

        return Create(null, null, true);
    }
    
    public static Delegate RemoveDelegate(Delegate obj, LuaFunction func)
    {
        LuaState state = func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld.func == func)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                break;
            }
        }

        return obj;
    }
    
    public static Delegate RemoveDelegate(Delegate obj, Delegate dg)
    {
        LuaDelegate remove = dg.Target as LuaDelegate;

        if (remove == null)
        {
            obj = Delegate.Remove(obj, dg);
            return obj;
        }

        LuaState state = remove.func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();        

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld == remove)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                state.DelayDispose(ld.self);
                break;
            }
        }

        return obj;
    }

	class System_Action_Event : LuaDelegate
	{
		public System_Action_Event(LuaFunction func) : base(func) { }
		public System_Action_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			func.Call();
		}

		public void CallWithSelf()
		{
			func.BeginPCall();
			func.Push(self);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action System_Action(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			System_Action_Event target = new System_Action_Event(func);
			System.Action d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_Event target = new System_Action_Event(func, self);
			System.Action d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action), L, pos);
	}

	void Push_System_Action(IntPtr L, System.Action o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Events_UnityAction_Event : LuaDelegate
	{
		public UnityEngine_Events_UnityAction_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Events_UnityAction_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			func.Call();
		}

		public void CallWithSelf()
		{
			func.BeginPCall();
			func.Push(self);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.Events.UnityAction UnityEngine_Events_UnityAction(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Events.UnityAction fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func);
			UnityEngine.Events.UnityAction d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func, self);
			UnityEngine.Events.UnityAction d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Events_UnityAction(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Events.UnityAction), L, pos);
	}

	void Push_UnityEngine_Events_UnityAction(IntPtr L, UnityEngine.Events.UnityAction o)
	{
		ToLua.Push(L, o);
	}

	class System_Predicate_int_Event : LuaDelegate
	{
		public System_Predicate_int_Event(LuaFunction func) : base(func) { }
		public System_Predicate_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(int param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}

		public bool CallWithSelf(int param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}
	}

	public System.Predicate<int> System_Predicate_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Predicate<int> fn = delegate(int param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Predicate_int_Event target = new System_Predicate_int_Event(func);
			System.Predicate<int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Predicate_int_Event target = new System_Predicate_int_Event(func, self);
			System.Predicate<int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Predicate_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Predicate<int>), L, pos);
	}

	void Push_System_Predicate_int(IntPtr L, System.Predicate<int> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_int_Event : LuaDelegate
	{
		public System_Action_int_Event(LuaFunction func) : base(func) { }
		public System_Action_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(int param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(int param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<int> System_Action_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<int> fn = delegate(int param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_int_Event target = new System_Action_int_Event(func);
			System.Action<int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_int_Event target = new System_Action_int_Event(func, self);
			System.Action<int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<int>), L, pos);
	}

	void Push_System_Action_int(IntPtr L, System.Action<int> o)
	{
		ToLua.Push(L, o);
	}

	class System_Comparison_int_Event : LuaDelegate
	{
		public System_Comparison_int_Event(LuaFunction func) : base(func) { }
		public System_Comparison_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(int param0, int param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public int CallWithSelf(int param0, int param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public System.Comparison<int> System_Comparison_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Comparison<int> fn = delegate(int param0, int param1) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Comparison_int_Event target = new System_Comparison_int_Event(func);
			System.Comparison<int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Comparison_int_Event target = new System_Comparison_int_Event(func, self);
			System.Comparison<int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Comparison_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Comparison<int>), L, pos);
	}

	void Push_System_Comparison_int(IntPtr L, System.Comparison<int> o)
	{
		ToLua.Push(L, o);
	}

	class System_Func_int_int_Event : LuaDelegate
	{
		public System_Func_int_int_Event(LuaFunction func) : base(func) { }
		public System_Func_int_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(int param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public int CallWithSelf(int param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public System.Func<int,int> System_Func_int_int(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Func<int,int> fn = delegate(int param0) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Func_int_int_Event target = new System_Func_int_int_Event(func);
			System.Func<int,int> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Func_int_int_Event target = new System_Func_int_int_Event(func, self);
			System.Func<int,int> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Func_int_int(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Func<int,int>), L, pos);
	}

	void Push_System_Func_int_int(IntPtr L, System.Func<int,int> o)
	{
		ToLua.Push(L, o);
	}

	class DG_Tweening_TweenAnimCallBack_Event : LuaDelegate
	{
		public DG_Tweening_TweenAnimCallBack_Event(LuaFunction func) : base(func) { }
		public DG_Tweening_TweenAnimCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(DG.Tweening.DOTweenAnimation param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(DG.Tweening.DOTweenAnimation param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public DG.Tweening.TweenAnimCallBack DG_Tweening_TweenAnimCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			DG.Tweening.TweenAnimCallBack fn = delegate(DG.Tweening.DOTweenAnimation param0) { };
			return fn;
		}

		if(!flag)
		{
			DG_Tweening_TweenAnimCallBack_Event target = new DG_Tweening_TweenAnimCallBack_Event(func);
			DG.Tweening.TweenAnimCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			DG_Tweening_TweenAnimCallBack_Event target = new DG_Tweening_TweenAnimCallBack_Event(func, self);
			DG.Tweening.TweenAnimCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_DG_Tweening_TweenAnimCallBack(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(DG.Tweening.TweenAnimCallBack), L, pos);
	}

	void Push_DG_Tweening_TweenAnimCallBack(IntPtr L, DG.Tweening.TweenAnimCallBack o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_RectTransform_ReapplyDrivenProperties_Event : LuaDelegate
	{
		public UnityEngine_RectTransform_ReapplyDrivenProperties_Event(LuaFunction func) : base(func) { }
		public UnityEngine_RectTransform_ReapplyDrivenProperties_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.RectTransform param0)
		{
			func.BeginPCall();
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UnityEngine.RectTransform param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.RectTransform.ReapplyDrivenProperties UnityEngine_RectTransform_ReapplyDrivenProperties(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.RectTransform.ReapplyDrivenProperties fn = delegate(UnityEngine.RectTransform param0) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_RectTransform_ReapplyDrivenProperties_Event target = new UnityEngine_RectTransform_ReapplyDrivenProperties_Event(func);
			UnityEngine.RectTransform.ReapplyDrivenProperties d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_RectTransform_ReapplyDrivenProperties_Event target = new UnityEngine_RectTransform_ReapplyDrivenProperties_Event(func, self);
			UnityEngine.RectTransform.ReapplyDrivenProperties d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_RectTransform_ReapplyDrivenProperties(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.RectTransform.ReapplyDrivenProperties), L, pos);
	}

	void Push_UnityEngine_RectTransform_ReapplyDrivenProperties(IntPtr L, UnityEngine.RectTransform.ReapplyDrivenProperties o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Camera_CameraCallback_Event : LuaDelegate
	{
		public UnityEngine_Camera_CameraCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Camera_CameraCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Camera param0)
		{
			func.BeginPCall();
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UnityEngine.Camera param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.Camera.CameraCallback UnityEngine_Camera_CameraCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Camera.CameraCallback fn = delegate(UnityEngine.Camera param0) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Camera_CameraCallback_Event target = new UnityEngine_Camera_CameraCallback_Event(func);
			UnityEngine.Camera.CameraCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Camera_CameraCallback_Event target = new UnityEngine_Camera_CameraCallback_Event(func, self);
			UnityEngine.Camera.CameraCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Camera_CameraCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Camera.CameraCallback), L, pos);
	}

	void Push_UnityEngine_Camera_CameraCallback(IntPtr L, UnityEngine.Camera.CameraCallback o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Application_LowMemoryCallback_Event : LuaDelegate
	{
		public UnityEngine_Application_LowMemoryCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Application_LowMemoryCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			func.Call();
		}

		public void CallWithSelf()
		{
			func.BeginPCall();
			func.Push(self);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.Application.LowMemoryCallback UnityEngine_Application_LowMemoryCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Application.LowMemoryCallback fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Application_LowMemoryCallback_Event target = new UnityEngine_Application_LowMemoryCallback_Event(func);
			UnityEngine.Application.LowMemoryCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Application_LowMemoryCallback_Event target = new UnityEngine_Application_LowMemoryCallback_Event(func, self);
			UnityEngine.Application.LowMemoryCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Application_LowMemoryCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Application.LowMemoryCallback), L, pos);
	}

	void Push_UnityEngine_Application_LowMemoryCallback(IntPtr L, UnityEngine.Application.LowMemoryCallback o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Application_AdvertisingIdentifierCallback_Event : LuaDelegate
	{
		public UnityEngine_Application_AdvertisingIdentifierCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Application_AdvertisingIdentifierCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, bool param1, string param2)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, bool param1, string param2)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.Application.AdvertisingIdentifierCallback UnityEngine_Application_AdvertisingIdentifierCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Application.AdvertisingIdentifierCallback fn = delegate(string param0, bool param1, string param2) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Application_AdvertisingIdentifierCallback_Event target = new UnityEngine_Application_AdvertisingIdentifierCallback_Event(func);
			UnityEngine.Application.AdvertisingIdentifierCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Application_AdvertisingIdentifierCallback_Event target = new UnityEngine_Application_AdvertisingIdentifierCallback_Event(func, self);
			UnityEngine.Application.AdvertisingIdentifierCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Application_AdvertisingIdentifierCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Application.AdvertisingIdentifierCallback), L, pos);
	}

	void Push_UnityEngine_Application_AdvertisingIdentifierCallback(IntPtr L, UnityEngine.Application.AdvertisingIdentifierCallback o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_Application_LogCallback_Event : LuaDelegate
	{
		public UnityEngine_Application_LogCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Application_LogCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, string param1, UnityEngine.LogType param2)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, string param1, UnityEngine.LogType param2)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.Application.LogCallback UnityEngine_Application_LogCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Application.LogCallback fn = delegate(string param0, string param1, UnityEngine.LogType param2) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Application_LogCallback_Event target = new UnityEngine_Application_LogCallback_Event(func);
			UnityEngine.Application.LogCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Application_LogCallback_Event target = new UnityEngine_Application_LogCallback_Event(func, self);
			UnityEngine.Application.LogCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_Application_LogCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.Application.LogCallback), L, pos);
	}

	void Push_UnityEngine_Application_LogCallback(IntPtr L, UnityEngine.Application.LogCallback o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_AudioClip_PCMReaderCallback_Event : LuaDelegate
	{
		public UnityEngine_AudioClip_PCMReaderCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_AudioClip_PCMReaderCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(float[] param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(float[] param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.AudioClip.PCMReaderCallback UnityEngine_AudioClip_PCMReaderCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.AudioClip.PCMReaderCallback fn = delegate(float[] param0) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_AudioClip_PCMReaderCallback_Event target = new UnityEngine_AudioClip_PCMReaderCallback_Event(func);
			UnityEngine.AudioClip.PCMReaderCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_AudioClip_PCMReaderCallback_Event target = new UnityEngine_AudioClip_PCMReaderCallback_Event(func, self);
			UnityEngine.AudioClip.PCMReaderCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_AudioClip_PCMReaderCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.AudioClip.PCMReaderCallback), L, pos);
	}

	void Push_UnityEngine_AudioClip_PCMReaderCallback(IntPtr L, UnityEngine.AudioClip.PCMReaderCallback o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_AudioClip_PCMSetPositionCallback_Event : LuaDelegate
	{
		public UnityEngine_AudioClip_PCMSetPositionCallback_Event(LuaFunction func) : base(func) { }
		public UnityEngine_AudioClip_PCMSetPositionCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(int param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(int param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public UnityEngine.AudioClip.PCMSetPositionCallback UnityEngine_AudioClip_PCMSetPositionCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.AudioClip.PCMSetPositionCallback fn = delegate(int param0) { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_AudioClip_PCMSetPositionCallback_Event target = new UnityEngine_AudioClip_PCMSetPositionCallback_Event(func);
			UnityEngine.AudioClip.PCMSetPositionCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_AudioClip_PCMSetPositionCallback_Event target = new UnityEngine_AudioClip_PCMSetPositionCallback_Event(func, self);
			UnityEngine.AudioClip.PCMSetPositionCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_AudioClip_PCMSetPositionCallback(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.AudioClip.PCMSetPositionCallback), L, pos);
	}

	void Push_UnityEngine_AudioClip_PCMSetPositionCallback(IntPtr L, UnityEngine.AudioClip.PCMSetPositionCallback o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_UnityEngine_AsyncOperation_Event : LuaDelegate
	{
		public System_Action_UnityEngine_AsyncOperation_Event(LuaFunction func) : base(func) { }
		public System_Action_UnityEngine_AsyncOperation_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.AsyncOperation param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UnityEngine.AsyncOperation param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<UnityEngine.AsyncOperation> System_Action_UnityEngine_AsyncOperation(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<UnityEngine.AsyncOperation> fn = delegate(UnityEngine.AsyncOperation param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_UnityEngine_AsyncOperation_Event target = new System_Action_UnityEngine_AsyncOperation_Event(func);
			System.Action<UnityEngine.AsyncOperation> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_UnityEngine_AsyncOperation_Event target = new System_Action_UnityEngine_AsyncOperation_Event(func, self);
			System.Action<UnityEngine.AsyncOperation> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_UnityEngine_AsyncOperation(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<UnityEngine.AsyncOperation>), L, pos);
	}

	void Push_System_Action_UnityEngine_AsyncOperation(IntPtr L, System.Action<UnityEngine.AsyncOperation> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_string_UnityEngine_Sprite_Event : LuaDelegate
	{
		public System_Action_string_UnityEngine_Sprite_Event(LuaFunction func) : base(func) { }
		public System_Action_string_UnityEngine_Sprite_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, UnityEngine.Sprite param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PushSealed(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, UnityEngine.Sprite param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PushSealed(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<string,UnityEngine.Sprite> System_Action_string_UnityEngine_Sprite(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<string,UnityEngine.Sprite> fn = delegate(string param0, UnityEngine.Sprite param1) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_string_UnityEngine_Sprite_Event target = new System_Action_string_UnityEngine_Sprite_Event(func);
			System.Action<string,UnityEngine.Sprite> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_string_UnityEngine_Sprite_Event target = new System_Action_string_UnityEngine_Sprite_Event(func, self);
			System.Action<string,UnityEngine.Sprite> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_string_UnityEngine_Sprite(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<string,UnityEngine.Sprite>), L, pos);
	}

	void Push_System_Action_string_UnityEngine_Sprite(IntPtr L, System.Action<string,UnityEngine.Sprite> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_string_UnityEngine_GameObject_Event : LuaDelegate
	{
		public System_Action_string_UnityEngine_GameObject_Event(LuaFunction func) : base(func) { }
		public System_Action_string_UnityEngine_GameObject_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, UnityEngine.GameObject param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PushSealed(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, UnityEngine.GameObject param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PushSealed(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<string,UnityEngine.GameObject> System_Action_string_UnityEngine_GameObject(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<string,UnityEngine.GameObject> fn = delegate(string param0, UnityEngine.GameObject param1) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_string_UnityEngine_GameObject_Event target = new System_Action_string_UnityEngine_GameObject_Event(func);
			System.Action<string,UnityEngine.GameObject> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_string_UnityEngine_GameObject_Event target = new System_Action_string_UnityEngine_GameObject_Event(func, self);
			System.Action<string,UnityEngine.GameObject> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_string_UnityEngine_GameObject(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<string,UnityEngine.GameObject>), L, pos);
	}

	void Push_System_Action_string_UnityEngine_GameObject(IntPtr L, System.Action<string,UnityEngine.GameObject> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_string_UnityEngine_Object_Event : LuaDelegate
	{
		public System_Action_string_UnityEngine_Object_Event(LuaFunction func) : base(func) { }
		public System_Action_string_UnityEngine_Object_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, UnityEngine.Object param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, UnityEngine.Object param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<string,UnityEngine.Object> System_Action_string_UnityEngine_Object(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<string,UnityEngine.Object> fn = delegate(string param0, UnityEngine.Object param1) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_string_UnityEngine_Object_Event target = new System_Action_string_UnityEngine_Object_Event(func);
			System.Action<string,UnityEngine.Object> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_string_UnityEngine_Object_Event target = new System_Action_string_UnityEngine_Object_Event(func, self);
			System.Action<string,UnityEngine.Object> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_string_UnityEngine_Object(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<string,UnityEngine.Object>), L, pos);
	}

	void Push_System_Action_string_UnityEngine_Object(IntPtr L, System.Action<string,UnityEngine.Object> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event : LuaDelegate
	{
		public System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event(LuaFunction func) : base(func) { }
		public System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(System.Collections.Generic.Dictionary<string,UnityEngine.GameObject> param0)
		{
			func.BeginPCall();
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(System.Collections.Generic.Dictionary<string,UnityEngine.GameObject> param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushSealed(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>> System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>> fn = delegate(System.Collections.Generic.Dictionary<string,UnityEngine.GameObject> param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event target = new System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event(func);
			System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event target = new System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject_Event(func, self);
			System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>>), L, pos);
	}

	void Push_System_Action_System_Collections_Generic_Dictionary_string_UnityEngine_GameObject(IntPtr L, System.Action<System.Collections.Generic.Dictionary<string,UnityEngine.GameObject>> o)
	{
		ToLua.Push(L, o);
	}

	class AlignToFinish_Event : LuaDelegate
	{
		public AlignToFinish_Event(LuaFunction func) : base(func) { }
		public AlignToFinish_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(int param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(int param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public AlignToFinish AlignToFinish(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			AlignToFinish fn = delegate(int param0) { };
			return fn;
		}

		if(!flag)
		{
			AlignToFinish_Event target = new AlignToFinish_Event(func);
			AlignToFinish d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			AlignToFinish_Event target = new AlignToFinish_Event(func, self);
			AlignToFinish d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_AlignToFinish(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(AlignToFinish), L, pos);
	}

	void Push_AlignToFinish(IntPtr L, AlignToFinish o)
	{
		ToLua.Push(L, o);
	}

	class UnityEngine_UI_InputField_OnValidateInput_Event : LuaDelegate
	{
		public UnityEngine_UI_InputField_OnValidateInput_Event(LuaFunction func) : base(func) { }
		public UnityEngine_UI_InputField_OnValidateInput_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public char Call(string param0, int param1, char param2)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			char ret = (char)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public char CallWithSelf(string param0, int param1, char param2)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.Push(param2);
			func.PCall();
			char ret = (char)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public UnityEngine.UI.InputField.OnValidateInput UnityEngine_UI_InputField_OnValidateInput(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.UI.InputField.OnValidateInput fn = delegate(string param0, int param1, char param2) { return '\0'; };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_UI_InputField_OnValidateInput_Event target = new UnityEngine_UI_InputField_OnValidateInput_Event(func);
			UnityEngine.UI.InputField.OnValidateInput d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_UI_InputField_OnValidateInput_Event target = new UnityEngine_UI_InputField_OnValidateInput_Event(func, self);
			UnityEngine.UI.InputField.OnValidateInput d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UnityEngine_UI_InputField_OnValidateInput(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UnityEngine.UI.InputField.OnValidateInput), L, pos);
	}

	void Push_UnityEngine_UI_InputField_OnValidateInput(IntPtr L, UnityEngine.UI.InputField.OnValidateInput o)
	{
		ToLua.Push(L, o);
	}

	class UpdateItemDelegate_Event : LuaDelegate
	{
		public UpdateItemDelegate_Event(LuaFunction func) : base(func) { }
		public UpdateItemDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(int param0, UnityEngine.Transform param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(int param0, UnityEngine.Transform param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public UpdateItemDelegate UpdateItemDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UpdateItemDelegate fn = delegate(int param0, UnityEngine.Transform param1) { };
			return fn;
		}

		if(!flag)
		{
			UpdateItemDelegate_Event target = new UpdateItemDelegate_Event(func);
			UpdateItemDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UpdateItemDelegate_Event target = new UpdateItemDelegate_Event(func, self);
			UpdateItemDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_UpdateItemDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(UpdateItemDelegate), L, pos);
	}

	void Push_UpdateItemDelegate(IntPtr L, UpdateItemDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event : LuaDelegate
	{
		public Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.SkeletonRenderer param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(Spine.Unity.SkeletonRenderer param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate fn = delegate(Spine.Unity.SkeletonRenderer param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event target = new Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(func);
			Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event target = new Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate_Event(func, self);
			Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate), L, pos);
	}

	void Push_Spine_Unity_SkeletonRenderer_SkeletonRendererDelegate(IntPtr L, Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_MeshGeneratorDelegate_Event : LuaDelegate
	{
		public Spine_Unity_MeshGeneratorDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_MeshGeneratorDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.MeshGeneratorBuffers param0)
		{
			func.BeginPCall();
			func.PushValue(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(Spine.Unity.MeshGeneratorBuffers param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushValue(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public Spine.Unity.MeshGeneratorDelegate Spine_Unity_MeshGeneratorDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.MeshGeneratorDelegate fn = delegate(Spine.Unity.MeshGeneratorBuffers param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_MeshGeneratorDelegate_Event target = new Spine_Unity_MeshGeneratorDelegate_Event(func);
			Spine.Unity.MeshGeneratorDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_MeshGeneratorDelegate_Event target = new Spine_Unity_MeshGeneratorDelegate_Event(func, self);
			Spine.Unity.MeshGeneratorDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_MeshGeneratorDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.MeshGeneratorDelegate), L, pos);
	}

	void Push_Spine_Unity_MeshGeneratorDelegate(IntPtr L, Spine.Unity.MeshGeneratorDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_SkeletonRenderer_InstructionDelegate_Event : LuaDelegate
	{
		public Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.SkeletonRendererInstruction param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(Spine.Unity.SkeletonRendererInstruction param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public Spine.Unity.SkeletonRenderer.InstructionDelegate Spine_Unity_SkeletonRenderer_InstructionDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.SkeletonRenderer.InstructionDelegate fn = delegate(Spine.Unity.SkeletonRendererInstruction param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_SkeletonRenderer_InstructionDelegate_Event target = new Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(func);
			Spine.Unity.SkeletonRenderer.InstructionDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_SkeletonRenderer_InstructionDelegate_Event target = new Spine_Unity_SkeletonRenderer_InstructionDelegate_Event(func, self);
			Spine.Unity.SkeletonRenderer.InstructionDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_SkeletonRenderer_InstructionDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.SkeletonRenderer.InstructionDelegate), L, pos);
	}

	void Push_Spine_Unity_SkeletonRenderer_InstructionDelegate(IntPtr L, Spine.Unity.SkeletonRenderer.InstructionDelegate o)
	{
		ToLua.Push(L, o);
	}

	class Spine_Unity_UpdateBonesDelegate_Event : LuaDelegate
	{
		public Spine_Unity_UpdateBonesDelegate_Event(LuaFunction func) : base(func) { }
		public Spine_Unity_UpdateBonesDelegate_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Unity.ISkeletonAnimation param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(Spine.Unity.ISkeletonAnimation param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public Spine.Unity.UpdateBonesDelegate Spine_Unity_UpdateBonesDelegate(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			Spine.Unity.UpdateBonesDelegate fn = delegate(Spine.Unity.ISkeletonAnimation param0) { };
			return fn;
		}

		if(!flag)
		{
			Spine_Unity_UpdateBonesDelegate_Event target = new Spine_Unity_UpdateBonesDelegate_Event(func);
			Spine.Unity.UpdateBonesDelegate d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			Spine_Unity_UpdateBonesDelegate_Event target = new Spine_Unity_UpdateBonesDelegate_Event(func, self);
			Spine.Unity.UpdateBonesDelegate d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_Spine_Unity_UpdateBonesDelegate(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(Spine.Unity.UpdateBonesDelegate), L, pos);
	}

	void Push_Spine_Unity_UpdateBonesDelegate(IntPtr L, Spine.Unity.UpdateBonesDelegate o)
	{
		ToLua.Push(L, o);
	}

	class System_Predicate_Spine_Animation_Event : LuaDelegate
	{
		public System_Predicate_Spine_Animation_Event(LuaFunction func) : base(func) { }
		public System_Predicate_Spine_Animation_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(Spine.Animation param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}

		public bool CallWithSelf(Spine.Animation param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}
	}

	public System.Predicate<Spine.Animation> System_Predicate_Spine_Animation(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Predicate<Spine.Animation> fn = delegate(Spine.Animation param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Predicate_Spine_Animation_Event target = new System_Predicate_Spine_Animation_Event(func);
			System.Predicate<Spine.Animation> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Predicate_Spine_Animation_Event target = new System_Predicate_Spine_Animation_Event(func, self);
			System.Predicate<Spine.Animation> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Predicate_Spine_Animation(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Predicate<Spine.Animation>), L, pos);
	}

	void Push_System_Predicate_Spine_Animation(IntPtr L, System.Predicate<Spine.Animation> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_Spine_Animation_Event : LuaDelegate
	{
		public System_Action_Spine_Animation_Event(LuaFunction func) : base(func) { }
		public System_Action_Spine_Animation_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Animation param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(Spine.Animation param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<Spine.Animation> System_Action_Spine_Animation(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<Spine.Animation> fn = delegate(Spine.Animation param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_Spine_Animation_Event target = new System_Action_Spine_Animation_Event(func);
			System.Action<Spine.Animation> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_Spine_Animation_Event target = new System_Action_Spine_Animation_Event(func, self);
			System.Action<Spine.Animation> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_Spine_Animation(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<Spine.Animation>), L, pos);
	}

	void Push_System_Action_Spine_Animation(IntPtr L, System.Action<Spine.Animation> o)
	{
		ToLua.Push(L, o);
	}

	class System_Comparison_Spine_Animation_Event : LuaDelegate
	{
		public System_Comparison_Spine_Animation_Event(LuaFunction func) : base(func) { }
		public System_Comparison_Spine_Animation_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(Spine.Animation param0, Spine.Animation param1)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PushObject(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public int CallWithSelf(Spine.Animation param0, Spine.Animation param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PushObject(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public System.Comparison<Spine.Animation> System_Comparison_Spine_Animation(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Comparison<Spine.Animation> fn = delegate(Spine.Animation param0, Spine.Animation param1) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Comparison_Spine_Animation_Event target = new System_Comparison_Spine_Animation_Event(func);
			System.Comparison<Spine.Animation> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Comparison_Spine_Animation_Event target = new System_Comparison_Spine_Animation_Event(func, self);
			System.Comparison<Spine.Animation> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Comparison_Spine_Animation(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Comparison<Spine.Animation>), L, pos);
	}

	void Push_System_Comparison_Spine_Animation(IntPtr L, System.Comparison<Spine.Animation> o)
	{
		ToLua.Push(L, o);
	}

	class System_Predicate_Spine_Skin_Event : LuaDelegate
	{
		public System_Predicate_Spine_Skin_Event(LuaFunction func) : base(func) { }
		public System_Predicate_Spine_Skin_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(Spine.Skin param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}

		public bool CallWithSelf(Spine.Skin param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}
	}

	public System.Predicate<Spine.Skin> System_Predicate_Spine_Skin(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Predicate<Spine.Skin> fn = delegate(Spine.Skin param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Predicate_Spine_Skin_Event target = new System_Predicate_Spine_Skin_Event(func);
			System.Predicate<Spine.Skin> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Predicate_Spine_Skin_Event target = new System_Predicate_Spine_Skin_Event(func, self);
			System.Predicate<Spine.Skin> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Predicate_Spine_Skin(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Predicate<Spine.Skin>), L, pos);
	}

	void Push_System_Predicate_Spine_Skin(IntPtr L, System.Predicate<Spine.Skin> o)
	{
		ToLua.Push(L, o);
	}

	class System_Action_Spine_Skin_Event : LuaDelegate
	{
		public System_Action_Spine_Skin_Event(LuaFunction func) : base(func) { }
		public System_Action_Spine_Skin_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(Spine.Skin param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(Spine.Skin param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public System.Action<Spine.Skin> System_Action_Spine_Skin(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<Spine.Skin> fn = delegate(Spine.Skin param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_Spine_Skin_Event target = new System_Action_Spine_Skin_Event(func);
			System.Action<Spine.Skin> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_Spine_Skin_Event target = new System_Action_Spine_Skin_Event(func, self);
			System.Action<Spine.Skin> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Action_Spine_Skin(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Action<Spine.Skin>), L, pos);
	}

	void Push_System_Action_Spine_Skin(IntPtr L, System.Action<Spine.Skin> o)
	{
		ToLua.Push(L, o);
	}

	class System_Comparison_Spine_Skin_Event : LuaDelegate
	{
		public System_Comparison_Spine_Skin_Event(LuaFunction func) : base(func) { }
		public System_Comparison_Spine_Skin_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(Spine.Skin param0, Spine.Skin param1)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PushObject(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public int CallWithSelf(Spine.Skin param0, Spine.Skin param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PushObject(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public System.Comparison<Spine.Skin> System_Comparison_Spine_Skin(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Comparison<Spine.Skin> fn = delegate(Spine.Skin param0, Spine.Skin param1) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Comparison_Spine_Skin_Event target = new System_Comparison_Spine_Skin_Event(func);
			System.Comparison<Spine.Skin> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Comparison_Spine_Skin_Event target = new System_Comparison_Spine_Skin_Event(func, self);
			System.Comparison<Spine.Skin> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	bool Check_System_Comparison_Spine_Skin(IntPtr L, int pos)
	{
		return TypeChecker.CheckDelegateType(typeof(System.Comparison<Spine.Skin>), L, pos);
	}

	void Push_System_Comparison_Spine_Skin(IntPtr L, System.Comparison<Spine.Skin> o)
	{
		ToLua.Push(L, o);
	}

}

