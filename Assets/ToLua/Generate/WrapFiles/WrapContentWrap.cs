//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WrapContentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WrapContent), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("InitItemSpace", InitItemSpace);
		L.RegFunction("SetDataNum", SetDataNum);
		L.RegFunction("UpdatePadding", UpdatePadding);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("InitPadding", get_InitPadding, null);
		L.RegVar("Space", get_Space, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitItemSpace(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			WrapContent obj = (WrapContent)ToLua.CheckObject<WrapContent>(L, 1);
			UnityEngine.RectTransform[] arg0 = ToLua.CheckParamsObject<UnityEngine.RectTransform>(L, 2, count - 1);
			obj.InitItemSpace(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDataNum(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				WrapContent obj = (WrapContent)ToLua.CheckObject<WrapContent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.SetDataNum(arg0);
				return 0;
			}
			else if (count == 3)
			{
				WrapContent obj = (WrapContent)ToLua.CheckObject<WrapContent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetDataNum(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WrapContent.SetDataNum");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdatePadding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WrapContent obj = (WrapContent)ToLua.CheckObject<WrapContent>(L, 1);
			obj.UpdatePadding();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitPadding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WrapContent obj = (WrapContent)o;
			UnityEngine.RectOffset ret = obj.InitPadding;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitPadding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Space(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WrapContent obj = (WrapContent)o;
			float ret = obj.Space;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Space on a nil value");
		}
	}
}

