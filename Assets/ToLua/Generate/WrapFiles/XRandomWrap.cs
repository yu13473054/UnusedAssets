//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class XRandomWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(XRandom), typeof(System.Object));
		L.RegFunction("setSeed", setSeed);
		L.RegFunction("nextBytes", nextBytes);
		L.RegFunction("nextInt", nextInt);
		L.RegFunction("nextLong", nextLong);
		L.RegFunction("nextBoolean", nextBoolean);
		L.RegFunction("nextFloat", nextFloat);
		L.RegFunction("nextDouble", nextDouble);
		L.RegFunction("nextGaussian", nextGaussian);
		L.RegFunction("New", _CreateXRandom);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateXRandom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				XRandom obj = new XRandom();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				long arg0 = LuaDLL.tolua_checkint64(L, 1);
				XRandom obj = new XRandom(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: XRandom.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.setSeed(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.nextBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextInt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
				int o = obj.nextInt();
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2)
			{
				XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int o = obj.nextInt(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: XRandom.nextInt");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			long o = obj.nextLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			bool o = obj.nextBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			float o = obj.nextFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			double o = obj.nextDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int nextGaussian(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			XRandom obj = (XRandom)ToLua.CheckObject<XRandom>(L, 1);
			double o = obj.nextGaussian();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

