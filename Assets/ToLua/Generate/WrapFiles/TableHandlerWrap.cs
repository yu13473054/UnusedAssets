//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TableHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TableHandler), typeof(System.Object));
		L.RegFunction("OpenFromData", OpenFromData);
		L.RegFunction("Open", Open);
		L.RegFunction("OpenFromMemory", OpenFromMemory);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("GetColumn", GetColumn);
		L.RegFunction("GetRecordsNum", GetRecordsNum);
		L.RegFunction("GetFieldsNum", GetFieldsNum);
		L.RegFunction("New", _CreateTableHandler);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTableHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TableHandler obj = new TableHandler();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TableHandler.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFromData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.OpenFromData(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.Open(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFromMemory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				bool o = obj.OpenFromMemory(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.OpenFromMemory(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TableHandler.OpenFromMemory");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string o = obj.GetValue(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColumn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetColumn(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRecordsNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
			int o = obj.GetRecordsNum();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFieldsNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableHandler obj = (TableHandler)ToLua.CheckObject<TableHandler>(L, 1);
			int o = obj.GetFieldsNum();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

