//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Open", Open);
		L.RegFunction("SetFullStack", SetFullStack);
		L.RegFunction("Add2FullStack", Add2FullStack);
		L.RegFunction("Close", Close);
		L.RegFunction("InstantiateGo", InstantiateGo);
		L.RegFunction("CloseAll", CloseAll);
		L.RegFunction("World2ScreenPos", World2ScreenPos);
		L.RegFunction("OpenCount", OpenCount);
		L.RegFunction("GetUIRoot", GetUIRoot);
		L.RegFunction("GetUICamera", GetUICamera);
		L.RegFunction("GetCanvas", GetCanvas);
		L.RegFunction("GetLayer", GetLayer);
		L.RegFunction("UnloadAllUI", UnloadAllUI);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("instance", get_instance, set_instance);
		L.RegConstant("UI_MAXCOUNT", 16);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UISystem o = obj.Open(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFullStack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			string[] arg0 = ToLua.CheckParamsString(L, 2, count - 1);
			obj.SetFullStack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add2FullStack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			string[] arg0 = ToLua.CheckParamsString(L, 2, count - 1);
			obj.Add2FullStack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UISystem>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				UISystem arg0 = (UISystem)ToLua.ToObject(L, 2);
				obj.Close(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Close(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.Close");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstantiateGo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.Transform o = obj.InstantiateGo(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 3);
				UnityEngine.Transform o = obj.InstantiateGo(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.InstantiateGo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CloseAll(arg0);
				return 0;
			}
			else if (TypeChecker.CheckTypes<UIManager>(L, 1) && TypeChecker.CheckParamsType<UILayer>(L, 2, count - 1))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				UILayer[] arg0 = ToLua.ToParamsObject<UILayer>(L, 2, count - 1);
				obj.CloseAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.CloseAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int World2ScreenPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
			UnityEngine.Vector3 o = obj.World2ScreenPos(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			int o = obj.OpenCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIRoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			UnityEngine.Transform o = obj.GetUIRoot();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUICamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			UnityEngine.Camera o = obj.GetUICamera();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCanvas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			UnityEngine.Canvas o = obj.GetCanvas();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UILayer>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				UILayer arg0 = (UILayer)ToLua.ToObject(L, 2);
				UnityEngine.Transform o = obj.GetLayer(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Transform o = obj.GetLayer(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.GetLayer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
			obj.UnloadAllUI();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UISystem, string>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				UISystem arg0 = (UISystem)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Sprite o = obj.GetSprite(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Sprite o = obj.GetSprite(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				UnityEngine.Sprite o = obj.GetSprite(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UIManager obj = (UIManager)ToLua.CheckObject<UIManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				UnityEngine.Sprite o = obj.GetSprite(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.GetSprite");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UIManager.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_instance(IntPtr L)
	{
		try
		{
			UIManager arg0 = (UIManager)ToLua.CheckObject<UIManager>(L, 2);
			UIManager.instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

