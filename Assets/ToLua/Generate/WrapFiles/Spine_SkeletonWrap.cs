//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_SkeletonWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.Skeleton), typeof(System.Object));
		L.RegFunction("UpdateCache", UpdateCache);
		L.RegFunction("UpdateWorldTransform", UpdateWorldTransform);
		L.RegFunction("SetToSetupPose", SetToSetupPose);
		L.RegFunction("SetBonesToSetupPose", SetBonesToSetupPose);
		L.RegFunction("SetSlotsToSetupPose", SetSlotsToSetupPose);
		L.RegFunction("FindBone", FindBone);
		L.RegFunction("FindBoneIndex", FindBoneIndex);
		L.RegFunction("FindSlot", FindSlot);
		L.RegFunction("FindSlotIndex", FindSlotIndex);
		L.RegFunction("SetSkin", SetSkin);
		L.RegFunction("GetAttachment", GetAttachment);
		L.RegFunction("SetAttachment", SetAttachment);
		L.RegFunction("FindIkConstraint", FindIkConstraint);
		L.RegFunction("FindTransformConstraint", FindTransformConstraint);
		L.RegFunction("FindPathConstraint", FindPathConstraint);
		L.RegFunction("Update", Update);
		L.RegFunction("GetBounds", GetBounds);
		L.RegFunction("New", _CreateSpine_Skeleton);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Data", get_Data, null);
		L.RegVar("Bones", get_Bones, null);
		L.RegVar("UpdateCacheList", get_UpdateCacheList, null);
		L.RegVar("Slots", get_Slots, null);
		L.RegVar("DrawOrder", get_DrawOrder, null);
		L.RegVar("IkConstraints", get_IkConstraints, null);
		L.RegVar("PathConstraints", get_PathConstraints, null);
		L.RegVar("TransformConstraints", get_TransformConstraints, null);
		L.RegVar("Skin", get_Skin, set_Skin);
		L.RegVar("R", get_R, set_R);
		L.RegVar("G", get_G, set_G);
		L.RegVar("B", get_B, set_B);
		L.RegVar("A", get_A, set_A);
		L.RegVar("Time", get_Time, set_Time);
		L.RegVar("X", get_X, set_X);
		L.RegVar("Y", get_Y, set_Y);
		L.RegVar("FlipX", get_FlipX, set_FlipX);
		L.RegVar("FlipY", get_FlipY, set_FlipY);
		L.RegVar("RootBone", get_RootBone, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_Skeleton(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Spine.SkeletonData arg0 = (Spine.SkeletonData)ToLua.CheckObject<Spine.SkeletonData>(L, 1);
				Spine.Skeleton obj = new Spine.Skeleton(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.Skeleton.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			obj.UpdateCache();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateWorldTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			obj.UpdateWorldTransform();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetToSetupPose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			obj.SetToSetupPose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBonesToSetupPose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			obj.SetBonesToSetupPose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSlotsToSetupPose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			obj.SetSlotsToSetupPose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindBone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Spine.Bone o = obj.FindBone(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindBoneIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.FindBoneIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindSlot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Spine.Slot o = obj.FindSlot(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindSlotIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.FindSlotIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSkin(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Spine.Skin>(L, 2))
			{
				Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
				Spine.Skin arg0 = (Spine.Skin)ToLua.ToObject(L, 2);
				obj.SetSkin(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.SetSkin(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Skeleton.SetSkin");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttachment(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				Spine.Attachment o = obj.GetAttachment(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				Spine.Attachment o = obj.GetAttachment(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Skeleton.GetAttachment");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetAttachment(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindIkConstraint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Spine.IkConstraint o = obj.FindIkConstraint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTransformConstraint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Spine.TransformConstraint o = obj.FindTransformConstraint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindPathConstraint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Spine.PathConstraint o = obj.FindPathConstraint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			Spine.Skeleton obj = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 1);
			float arg0;
			float arg1;
			float arg2;
			float arg3;
			float[] arg4 = ToLua.CheckNumberArray<float>(L, 6);
			obj.GetBounds(out arg0, out arg1, out arg2, out arg3, ref arg4);
			LuaDLL.lua_pushnumber(L, arg0);
			LuaDLL.lua_pushnumber(L, arg1);
			LuaDLL.lua_pushnumber(L, arg2);
			LuaDLL.lua_pushnumber(L, arg3);
			ToLua.Push(L, arg4);
			return 5;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.SkeletonData ret = obj.Data;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bones(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.Bone> ret = obj.Bones;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Bones on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateCacheList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.IUpdatable> ret = obj.UpdateCacheList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateCacheList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Slots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.Slot> ret = obj.Slots;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Slots on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DrawOrder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.Slot> ret = obj.DrawOrder;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DrawOrder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IkConstraints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.IkConstraint> ret = obj.IkConstraints;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IkConstraints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PathConstraints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.PathConstraint> ret = obj.PathConstraints;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PathConstraints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TransformConstraints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.ExposedList<Spine.TransformConstraint> ret = obj.TransformConstraints;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TransformConstraints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Skin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.Skin ret = obj.Skin;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Skin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_R(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.R;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index R on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_G(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.G;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index G on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_B(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.B;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index B on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_A(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.A;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index A on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.Time;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Time on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_X(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.X;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index X on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Y(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float ret = obj.Y;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Y on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlipX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			bool ret = obj.FlipX;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FlipX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlipY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			bool ret = obj.FlipY;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FlipY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RootBone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.Bone ret = obj.RootBone;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RootBone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Skin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			obj.Skin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Skin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_R(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.R = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index R on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_G(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.G = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index G on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_B(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.B = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index B on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_A(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.A = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index A on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Time on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_X(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.X = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index X on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Y(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Y = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Y on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FlipX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FlipX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FlipX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FlipY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Skeleton obj = (Spine.Skeleton)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FlipY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FlipY on a nil value");
		}
	}
}

